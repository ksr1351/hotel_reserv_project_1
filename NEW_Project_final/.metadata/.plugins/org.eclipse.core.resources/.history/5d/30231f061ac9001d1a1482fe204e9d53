package testBoard.board.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import testBoard.board.dto.Hotel_ReviewDTO;
import testBoard.board.dto.ImageDTO;
import testBoard.board.service.HotelService;

@RestController
public class ReviewController {

	private final HotelService service;
	
	@Autowired
	public ReviewController(HotelService service) {
		this.service = service;
	}


	@GetMapping("/getReviews")
	public Map<String, Object> HotelReviews(@RequestParam("hotel_code") int hotel_code,HttpServletResponse res){
		
		
		
		Map<String, Object> response = new HashMap<>();
		
		response.put("reviewList", service.hotel_ReviewProcess(hotel_code));
		response.put("rating", service.updateRatingProcess(hotel_code));
		
		
		return response;
	}
	
	
	@PostMapping("/insertReview")
	public String insertReview(MultipartHttpServletRequest request) {
		
		
			//리뷰 사진을 제외한 DTO
			Hotel_ReviewDTO review = new Hotel_ReviewDTO();
			review.setBooking_code(Integer.parseInt(request.getParameter("booking_code")));
			review.setContent(request.getParameter("content"));
			review.setRating_value(Integer.parseInt(request.getParameter("rating_value")));
		
		    service.insertReviewProcess(review, reviewImagesProcess(request));
		      
		
		return "success";
	}
	
	@RequestMapping(value = "/updateReview", method = RequestMethod.POST, headers = "X-HTTP-Method-Override=PUT")
	@ResponseBody
	public String updateReview(MultipartHttpServletRequest request) {
		
		// 리뷰 사진을 제외한 DTO
	      Hotel_ReviewDTO review = new Hotel_ReviewDTO();
	      review.setReview_code(Integer.parseInt(request.getParameter("review_code")));
	      review.setContent(request.getParameter("content"));
	      review.setRating_value(Integer.parseInt(request.getParameter("rating_value")));
		
	      service.updateReviewProcess(review, reviewImagesProcess(request));
	      
		return "success";
	}
	
	//이미지 저장 메소드
	private List<ImageDTO> reviewImagesProcess(MultipartHttpServletRequest request) {
		List<MultipartFile> files = request.getFiles("images");
	      List<ImageDTO> reviewImages = new ArrayList<>();
	      
	      boolean check =files.stream().map(n->n.getOriginalFilename().isEmpty()).findFirst().orElseGet(null);
	      
	      if(files!=null && !files.\isEmpty()) {
	         // 첨부된 파일 리스트를 돌면서 파일 저장 + DB 저장
	         for (MultipartFile file : files) {
	            String filename = file.getOriginalFilename();
	            String filepath = "D:/k_digital_ksr/NEW_Project-master/subProject/src/main/webapp/resources/images/review_img/" + filename;
	            String NewFilepath = filepath.substring(62);
	            
	            try {
	               File destFile = new File(filepath);
	               file.transferTo(destFile);
	            } catch (Exception e) {
	               e.printStackTrace();
	            }
	            
	            ImageDTO reviewImage = new ImageDTO();
	            reviewImage.setFilename(filename);
	            reviewImage.setFilepath(NewFilepath);
	            
	            reviewImages.add(reviewImage);
	         }
	      }
	      
	      return reviewImages;
	}

	//리뷰 삭제
	@RequestMapping(value = "/deleteReview", method = RequestMethod.DELETE)
	public String deleteReview(@RequestParam("review_code")int review_code) {
		
		service.deleteReviewProcess(review_code);
		
		return "success";
	}
	
	
}









